name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-format-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Arduino CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
        sudo mv bin/arduino-cli /usr/local/bin/
        arduino-cli version
        
    - name: Initialize Arduino CLI
      run: |
        arduino-cli config init
        arduino-cli core update-index
        
    - name: Add RP2040 board package URL
      run: |
        arduino-cli config add board_manager.additional_urls https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json
        
    - name: Install RP2040 core
      run: |
        arduino-cli core update-index
        arduino-cli core install rp2040:rp2040
        
    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        
    - name: Compile transmit_data example
      run: |
        arduino-cli compile examples/transmit_data -b rp2040:rp2040:rpipico --verbose
        
    - name: Compile receive_test example
      run: |
        arduino-cli compile examples/receive_test -b rp2040:rp2040:rpipico --verbose
        
    - name: Check code formatting
      run: |
        # Check if files are properly formatted using clang-format
        # This follows the same pattern as the .justfile but checks instead of formatting
        echo "Checking code formatting..."
        formatting_errors=0
        temp_file=$(mktemp)
        
        find . \
          -path './.pio' -prune -o \
          \( \( -name \*.cpp -o -name \*.h -o -name \*.ino \) -a ! -iname \*radio_config.h\* \) \
          -print > "$temp_file"
          
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            if ! diff -u "$file" <(clang-format "$file") > /dev/null; then
              echo "❌ File $file is not properly formatted"
              echo "Differences:"
              diff -u "$file" <(clang-format "$file") || true
              echo "To fix, run: clang-format -i \"$file\""
              formatting_errors=$((formatting_errors + 1))
            else
              echo "✅ File $file is properly formatted"
            fi
          fi
        done < "$temp_file"
        
        rm "$temp_file"
          
        if [ $formatting_errors -gt 0 ]; then
          echo "❌ Found $formatting_errors formatting issues"
          echo "Run 'just lint' or 'clang-format -i' on the affected files to fix"
          exit 1
        else
          echo "✅ All files are properly formatted"
        fi